-
  !python {model: ir.model.data, id: False} : |
      default_company = self.env['res.company']._company_default_get('account.journal')
      journal = self.env['account.journal'].search([('type', '=', 'sale'), ('company_id', '=', default_company.id)], limit=1)
      if journal:
          vals = {
              'journal_id': journal.id,
              'date': '2015-01-10',
              'ref': 'ENTRY2015',
          }
          self._update('account.move', 'account_financial_reports_multicurrency', vals, 'move_2015')
          vals = {
              'journal_id': journal.id,
              'date': '2016-01-10',
              'ref': 'ENTRY2016',
          }
          self._update('account.move', 'account_financial_reports_multicurrency', vals, 'move_2016')
          vals = {
              'journal_id': journal.id,
              'date': '2017-01-10',
              'ref': 'ENTRY2017',
          }
          self._update('account.move', 'account_financial_reports_multicurrency', vals, 'move_2017')
-
  !python {model: ir.model.data, id: False} : |
      account_default_company = self.env['res.company']._company_default_get('account.account')
      account_income_id = self.env['account.account'].search([('user_type_id', '=', ref('account.data_account_type_revenue')), ('tag_ids', 'in', [ref('account.account_tag_operating')]), ('company_id', '=', account_default_company.id)], limit=1).id
      account_receivable_id = self.env['account.account'].search([('user_type_id', '=', ref('account.data_account_type_receivable')), ('company_id', '=', account_default_company.id)], limit=1).id
      if account_income_id and account_receivable_id:
          self.with_context({'check_move_validity': False})._update('account.move.line', 'account_financial_reports_multicurrency', {
              'move_id': ref('move_2015'),
              'name': 'PRODUCT 1',
              'credit': 1000,
              'account_id': account_income_id}, 'move_line_1')
          self.with_context({'check_move_validity': False})._update('account.move.line', 'account_financial_reports_multicurrency', {
              'move_id': ref('move_2015'),
              'name': '/',
              'debit': 1000,
              'account_id': account_receivable_id}, 'move_line_2')

          self.with_context({'check_move_validity': False})._update('account.move.line', 'account_financial_reports_multicurrency', {
              'move_id': ref('move_2016'),
              'name': 'PRODUCT 1',
              'credit': 1000,
              'account_id': account_income_id}, 'move_line_3')
          self.with_context({'check_move_validity': False})._update('account.move.line', 'account_financial_reports_multicurrency', {
              'move_id': ref('move_2016'),
              'name': '/',
              'debit': 1000,
              'account_id': account_receivable_id}, 'move_line_4')

          self.with_context({'check_move_validity': False})._update('account.move.line', 'account_financial_reports_multicurrency', {
              'move_id': ref('move_2017'),
              'name': 'PRODUCT 1',
              'credit': 1000,
              'account_id': account_income_id}, 'move_line_5')
          self.with_context({'check_move_validity': False})._update('account.move.line', 'account_financial_reports_multicurrency', {
              'move_id': ref('move_2017'),
              'name': '/',
              'debit': 1000,
              'account_id': account_receivable_id}, 'move_line_6')
